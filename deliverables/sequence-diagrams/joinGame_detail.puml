@startuml

!startsub PARTS
!include events.puml

!procedure $joinGame_req($client, $server=Server)
    $client ->> $server : joinGame(gameID)
!endprocedure

!procedure $joinGame_res_OK($client, $status, $server=Server)
    $client <<- $server: updateGameStatus(<font:monospace><b>$status</b></font>)
    hnote over $client : IN_GAME
    $event_setMessages($client)
!endprocedure

!procedure $joinGame_res_KO_gameNotFound($client, $server=Server)
    $client <<- $server: KO, gameNotFound(gameID)
!endprocedure

!procedure $joinGame_res_KO_gameAlreadyStarted($client, $server=Server)
    $client <<- $server: KO, gameAlreadyStarted(gameID)
!endprocedure

!procedure $joinGame_seq_OK($client, $outsideGame="", $insideGame="", $status=AWAITING_PLAYERS, $server=Server)
     $joinGame_req($client, $server)
     $joinGame_res_OK($client, $status, $server)

     !foreach $c1 in %splitstr($insideGame, "~")
         $event_updatePlayerList($c1)
     !endfor

     !foreach $c2 in %splitstr($outsideGame, "~")
         $event_updateGameList($c2)
     !endfor
!endprocedure

!endsub

title Joining a game
participant Alice
participant Server
participant Bob
note over Server
    There is a previously created game.
endnote
/ hnote over Alice : AUTHENTICATED
/ hnote over Bob : AUTHENTICATED

$joinGame_req(Alice)
alt
    $joinGame_res_OK(Alice, AWAITING_PLAYERS)
    $event_updatePlayerList(Alice)
    $event_updateGameList(Bob)
    opt all players have joined
        event_seq_newStatus_SETUP_STARTING_CARD_SIDE("Alice~Bob")
    else someone wants to start the game early
        Alice ->> Server : startGame()
        alt there are at least two players
            event_seq_newStatus_SETUP_STARTING_CARD_SIDE("Alice~Bob")
        else there is just one player
            Alice <<- Server: KO, insufficientPlayers()
        end
    end
else game does not exist
    $joinGame_res_KO_gameNotFound(Alice)
else game has already started
    $joinGame_res_KO_gameAlreadyStarted(Alice)
end
@enduml
