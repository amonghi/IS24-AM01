@startuml
'this collapses nested packages if there are no in-between classes
!pragma useIntermediatePackages false

' emojis from Twemoji
sprite feather <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 36 36"><path fill="#C1694F" d="M4.048 29.644c-.811-.558-1.541-4.073-.936-4.404.738-.402.686.835 2.255 2.362 1.569 1.528 6.47.913 7.708 1.326 1.363.455-6.385 2.533-9.027.716z"/><path fill="#D99E82" d="M5.367 27.603C4 22 4.655 18.919 5.433 16.861 6.8 13.24 16.699 5.169 23.8 2.637 25.678 1.967 31.62 1 35 1c.589 2.332-1.174 6.717-1.62 7.518-1.009 1.81-3.564 4.273-8.646 9.482-.252.258-5.119-.46-5.376-.191-.283.296 4.044 1.579 3.755 1.889-.738.79-1.495 1.624-2.268 2.507-.172.196-8.311-.923-8.484-.722-.232.27 7.501 1.862 7.266 2.14-.645.765-1.299 1.564-1.959 2.397-1.725 2.178-12.301 1.583-12.301 1.583z"/><path fill="#C1694F" d="M19.15 12.787c1.588.966 5.331 1.943 8.316 2.422 1.898-1.937 3.299-3.378 4.302-4.529-2.259-.49-5.742-1.3-7.487-2.087l-.816-.403-4.872 4.17.557.427z"/><path fill="#662113" d="M35.088 1.514c-.02-.179-.047-.352-.088-.514-.378 0-.792.014-1.225.036-3.438.178-8.307 1.006-9.975 1.601-.345.123-.702.27-1.059.418-.478.198-.964.416-1.459.654.356 1.481 1.126 3.144 1.807 4.013-1.703 1.323-3.317 2.704-4.836 4.115-5.655 5.248-10.021 10.872-13.005 15.242.04.174.076.344.12.524 0 0 .219.012.589.026 1.482-2.288 5.703-8.239 13.194-14.841 1.565-1.379 3.276-2.786 5.13-4.195 1.745.787 5.228 1.597 7.487 2.087.322-.369.606-.712.849-1.028.316-.412.569-.785.763-1.134.415-.746 1.969-4.594 1.708-7.004z"/><path fill="#C1694F" d="M35 1c-.369 0-.751-.003-1.138-.008-3.915 1.874-7.509 4.194-10.772 6.73-.68-.87-1.451-2.532-1.807-4.013-1.467.708-2.987 1.575-4.484 2.539.309 1.911.852 4.377 1.455 5.589C6.827 22.441.638 34.605.553 34.776c-.124.247-.023.547.224.671.071.036.147.053.223.053.184 0 .36-.102.448-.276.119-.238 12.144-23.883 33.659-33.72-.032-.174-.066-.343-.107-.504z"/></svg>
sprite seedling <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 36 36"><path fill="#77B255" d="M22.911 14.398c-1.082.719-2.047 1.559-2.88 2.422-.127-4.245-1.147-9.735-6.772-12.423C12.146-1.658-.833 1.418.328 2.006c2.314 1.17 3.545 4.148 5.034 5.715 2.653 2.792 5.603 2.964 7.071.778 3.468 2.254 3.696 6.529 3.59 11.099-.012.505-.023.975-.023 1.402v14c0 1.104 4 1.104 4 0V23.51c.542-.954 2.122-3.505 4.43-5.294 1.586 1.393 4.142.948 6.463-1.495 1.489-1.567 2.293-4.544 4.607-5.715 1.221-.618-12.801-3.994-12.589 3.392z"/></svg>
sprite mushroom <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 36 36"><path fill="#99AAB5" d="M27 33c0 2.209-1.791 3-4 3H13c-2.209 0-4-.791-4-3s3-7 3-13 12-6 12 0 3 10.791 3 13z"/><path fill="#DD2E44" d="M34.666 11.189l-.001-.002c-.96-2.357-2.404-4.453-4.208-6.182h-.003C27.222 1.904 22.839 0 18 0 13.638 0 9.639 1.541 6.524 4.115c-2.19 1.809-3.941 4.13-5.076 6.785C.518 13.075 0 15.473 0 18c0 2.209 1.791 4 4 4h28c2.209 0 4-1.791 4-4 0-2.417-.48-4.713-1.334-6.811z"/><g fill="#F4ABBA"><path d="M7.708 16.583c3.475 0 6.292-2.817 6.292-6.292S11.184 4 7.708 4c-.405 0-.8.042-1.184.115-2.19 1.809-3.941 4.13-5.076 6.785.306 3.189 2.991 5.683 6.26 5.683z"/><path d="M7.708 4.25c3.331 0 6.041 2.71 6.041 6.042s-2.71 6.042-6.041 6.042c-3.107 0-5.678-2.314-6.006-5.394 1.097-2.541 2.8-4.817 4.931-6.59.364-.067.726-.1 1.075-.1m0-.25c-.405 0-.8.042-1.184.115-2.19 1.809-3.941 4.13-5.076 6.785.306 3.189 2.992 5.683 6.261 5.683 3.475 0 6.291-2.817 6.291-6.292S11.184 4 7.708 4zM26 9.5c0 2.485 2.015 4.5 4.5 4.5 1.887 0 3.497-1.164 4.166-2.811l-.001-.002c-.96-2.357-2.404-4.453-4.208-6.182C27.992 5.028 26 7.029 26 9.5z"/><circle cx="21.5" cy="16" r="4.5"/><circle cx="20" cy="5" r="3"/></g></svg>
sprite wolf <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 36 36"><path fill="#66757F" d="M14.858 9.497c.475 2.326-.182 4.236-2.921 4.638-2.741.403-6.7 3.898-8.848-1.798C1.844 9.038 1.092 2.234 2.628 2.009c1.537-.226 11.756 5.162 12.23 7.488z"/><path fill="#CCD6DD" d="M12.784 9.851c.865 1.392-2.205 3.833-3.844 4.568-1.639.736-2.915-.66-4.173-4.1-.55-1.503-1.234-5.532-.634-5.802.599-.268 7.785 3.942 8.651 5.334z"/><path fill="#66757F" d="M21.372 9.497c-.458 2.326.176 4.236 2.818 4.638 2.644.403 6.464 3.898 8.536-1.798 1.201-3.3 1.927-10.103.445-10.329-1.483-.225-11.342 5.163-11.799 7.489z"/><path fill="#CCD6DD" d="M23.373 9.851c-.835 1.392 2.127 3.833 3.708 4.568 1.581.736 2.812-.66 4.026-4.1.531-1.503 1.19-5.532.611-5.802-.577-.268-7.509 3.942-8.345 5.334z"/><path fill="#66757F" d="M32.347 26.912c0-.454-.188-1.091-.407-1.687.585.028 1.519.191 2.77.817-.008-.536-.118-.984-.273-1.393.041.02.075.034.116.055-1.104-3.31-3.309-5.517-3.309-5.517h2.206c-2.331-4.663-4.965-8.015-8.075-9.559-1.39-.873-3.688-1.338-7.373-1.339h-.003c-3.696 0-5.996.468-7.385 1.346-3.104 1.547-5.734 4.896-8.061 9.552H4.76s-2.207 2.206-3.311 5.517l.084-.039c-.201.392-.307.847-.282 1.377 1.263-.632 2.217-.792 2.813-.818-.189.513-.343 1.044-.386 1.475-.123.371-.191.812-.135 1.343 3.207-1.458 4.707-1.25 6.457-.375C11.213 31.29 14.206 34 18.001 34c3.793 0 6.746-2.794 7.958-6.416 1.458-1.25 3.708-.875 6.416.416.066-.413.036-.773-.036-1.093l.008.005z"/><path fill="#CCD6DD" d="M34.553 24.704c-.437-1.313-3.665-3.101-6.973-4.513.26-.664.42-1.401.42-2.191 0-2.761-1.791-5-4-5s-4 2.239-4 5c0 3 4 10-2.001 11.118-5.125-.955-2.954-6.201-2.212-9.58.072-.276.125-.559.158-.853.034-.245.055-.476.055-.685 0-2.761-1.791-5-4-5s-4 2.239-4 5c0 .79.16 1.527.421 2.191-3.308 1.412-6.535 3.2-6.973 4.513C3.655 23.6 4.759 23.6 4.759 23.6s-1.104 2.208-1.104 3.312c2.67-1.78 5.339-2.122 7.429-.452C12.297 30.083 14 33 18.001 30.124c3.999 2.876 5.7-.04 6.912-3.662 2.092-1.673 4.763-1.33 7.434.45 0-1.104-1.103-3.312-1.103-3.312s1.103.001 3.309 1.104z"/><path fill="#292F33" d="M11 17s0-1.5 1.5-1.5S14 17 14 17v1.5s0 1.5-1.5 1.5-1.5-1.5-1.5-1.5V17zm11 0s0-1.5 1.5-1.5S25 17 25 17v1.5s0 1.5-1.5 1.5-1.5-1.5-1.5-1.5V17zm-7.061 9.156c-1.021.208 2.041 3.968 3.062 3.968 1.02 0 4.082-3.76 3.062-3.968s-5.103-.208-6.124 0z"/></svg>
sprite butterfly <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 36 36"><path fill="#1C6399" d="M20.004 20.243c-.426 0-.858.01-1.294.031-.436 1.268-.468 2.747 0 5.097.328 1.646 2.659 6.299 4.584 7.933.683.58 1.638.884 2.69.884 2.144 0 4.691-1.265 6.157-4.034 3.001-5.671-3.474-9.911-12.137-9.911z"/><path fill="#1C6399" d="M33.666 1.973c-.204 0-.425.021-.663.066-3.182.601-9.302 5.126-14.287 11.771 0 0-.789 5.16-.789 6.194 0 .336 1.264.5 3.058.5 3.717 0 9.709-.705 11.424-2.041 1.898-1.479 3.65-9.804 3.488-14.079-.046-1.175-.662-2.411-2.231-2.411z"/><path fill="#55ACEE" d="M27.098 13.936l6.629-.436s-1.055 3.619-3.102 4.656-7.719 1.5-7.719 1.5 2.33-4.261 3.286-5.29c.237-.256.559-.408.906-.43zm.52-1.952l7.526-8.151s.002 5.365-1.206 8.635c0 0-5.383.379-5.914.391-.703.016-.969-.265-.406-.875zm-6.068 7.672l5.5-8.547c.188-.22.253-.52.171-.798l-.968-3.233-6.722 6.609-.844 6.031 2.863-.062zM27.862 8.88c.172.406.516.5.938.125s6.074-6.094 6-6.218c0 0-2.832-1.194-7.8 3.463 0 0 .69 2.224.862 2.63zm-8.925 12.099l5.373 5.228c.203.178.255.473.125.709L22.06 31.25s-4.187-5.479-3.123-10.271zm7.282 6.301l5.549.741s-1.058 3.845-3.394 4.854c-3.906 1.688-5.312-.625-5.312-.625l2.352-4.562c.151-.298.477-.463.805-.408zm-5.95-6.426l5.375 4.958c.077.066.169.11.269.129l6.119.903s-1.219-3.031-4.429-4.531c-3.71-1.733-7.334-1.459-7.334-1.459z"/><path fill="#292F33" d="M20.004 20.243c-.426 0-.858.01-1.294.031-.436 1.268-.468 2.747 0 5.097.328 1.646 2.659 6.299 4.584 7.933.683.58 1.638.884 2.69.884 2.144 0 4.691-1.265 6.157-4.034 3.001-5.671-3.474-9.911-12.137-9.911zm10.537 9.326c-1.316 2.486-3.05 3.473-4.558 3.473-.767 0-1.704-.313-2.15-.691-1.695-1.439-3.437-4.58-4.25-7.224-.465-1.513-.354-4.022-.354-4.022l.667-.021c5.168 0 9.249 2.058 10.726 4.512.714 1.186.687 2.523-.081 3.973z"/><path fill="#292F33" d="M33.666 3.223c.231 0 .935 0 .981 1.208.102 2.681-.594 6.061-1.397 8.882-.541 1.901-1.586 3.292-2.094 3.687-.56.436-1.863 1.238-3.719 1.563-2.03.355-4.207.833-6.456.833-.827 0-1.433.019-1.794-.021.131-1.218.489-3.551.717-5.064 3.768-4.94 9.711-10.361 13.331-11.044.155-.029.3-.044.431-.044m0-1.25c-.204 0-.425.021-.663.066-3.182.601-9.302 5.126-14.287 11.771 0 0-.789 5.16-.789 6.194 0 .336 1.264.5 3.058.5 3.717 0 9.709-.705 11.424-2.041 1.898-1.479 3.65-9.804 3.488-14.079-.046-1.175-.662-2.411-2.231-2.411z"/><path fill="#1C6399" d="M3.902 30.154c1.466 2.769 4.012 4.034 6.157 4.034 1.052 0 2.007-.304 2.69-.884 1.925-1.633 4.256-6.286 4.584-7.933.468-2.35.436-3.828 0-5.097-.436-.021-.868-.031-1.294-.031-8.665 0-15.139 4.24-12.137 9.911z"/><path fill="#1C6399" d="M2.376 1.973C.807 1.973.19 3.209.146 4.383c-.162 4.275 1.59 12.601 3.488 14.079 1.715 1.336 7.706 2.041 11.424 2.041 1.794 0 3.058-.164 3.058-.5 0-1.033-.789-6.194-.789-6.194C12.341 7.165 6.22 2.64 3.039 2.039c-.238-.045-.459-.066-.663-.066z"/><path fill="#55ACEE" d="M8.943 13.936L2.315 13.5s1.055 3.619 3.102 4.656 7.719 1.5 7.719 1.5-2.33-4.261-3.286-5.29c-.237-.256-.559-.408-.907-.43zm-.519-1.952L.898 3.833s-.002 5.365 1.206 8.635c0 0 5.383.379 5.914.391.703.016.969-.265.406-.875zm6.068 7.672l-5.5-8.547c-.188-.22-.253-.52-.171-.798l.968-3.233 6.722 6.609.844 6.031-2.863-.062zM8.179 8.88c-.172.406-.516.5-.938.125s-6.074-6.094-6-6.218c0 0 2.832-1.194 7.8 3.463.001 0-.69 2.224-.862 2.63zm8.926 12.099l-5.373 5.228c-.203.178-.255.473-.125.709l2.375 4.333c-.001.001 4.187-5.478 3.123-10.27zM9.822 27.28l-5.549.741s1.058 3.845 3.394 4.854c3.906 1.688 5.312-.625 5.312-.625l-2.352-4.562c-.15-.298-.476-.463-.805-.408zm5.951-6.426l-5.375 4.958c-.077.066-.169.11-.269.129l-6.119.903s1.219-3.031 4.429-4.531c3.709-1.733 7.334-1.459 7.334-1.459z"/><path fill="#292F33" d="M3.902 30.154c1.466 2.769 4.012 4.034 6.157 4.034 1.052 0 2.007-.304 2.69-.884 1.925-1.633 4.256-6.286 4.584-7.933.468-2.35.436-3.828 0-5.097-.436-.021-.868-.031-1.294-.031-8.665 0-15.139 4.24-12.137 9.911zm1.518-4.559c1.477-2.454 5.558-4.512 10.726-4.512l.667.021s.111 2.51-.354 4.022c-.813 2.644-2.555 5.785-4.25 7.224-.446.379-1.383.691-2.15.691-1.508 0-3.242-.986-4.558-3.473-.768-1.449-.795-2.786-.081-3.973z"/><path fill="#292F33" d="M2.376 3.223c.131 0 .276.015.431.044 3.619.683 9.563 6.104 13.331 11.044.228 1.513.586 3.846.717 5.064-.361.04-.967.021-1.794.021-2.249 0-4.426-.478-6.456-.833-1.856-.325-3.159-1.127-3.719-1.563-.508-.396-1.553-1.786-2.094-3.687-.803-2.821-1.499-6.201-1.397-8.882.046-1.208.749-1.208.981-1.208m0-1.25C.807 1.973.19 3.209.146 4.383c-.162 4.275 1.59 12.601 3.488 14.079 1.715 1.336 7.706 2.041 11.424 2.041 1.794 0 3.058-.164 3.058-.5 0-1.033-.789-6.194-.789-6.194C12.341 7.165 6.22 2.64 3.039 2.039c-.238-.045-.459-.066-.663-.066z"/><path fill="#292F33" d="M21.887 4.762c-.25-.138-.563-.047-.701.203l-2.74 4.98c-.018.033-.022.068-.032.102-.127-.007-.244-.018-.393-.018-.148 0-.266.01-.392.018-.01-.034-.014-.069-.032-.102l-2.74-4.98c-.138-.25-.452-.341-.702-.203-.25.137-.341.451-.203.701l2.655 4.826c-1.179.784 1.15 3.438.381 9.204-1.033 7.75 1.033 9.817 1.033 9.817s2.067-2.067 1.033-9.817c-.769-5.766 1.56-8.42.381-9.204l2.656-4.826c.137-.25.046-.564-.204-.701z"/></svg>
sprite jar <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 36 36" xml:space="preserve"><path fill="#C4C9C8" d="M8 8c0 .64.254 1.254.707 1.707a.256.256 0 0 1-.1.424l-.556.185A3 3 0 0 0 6 13.162v18.451c0 .002.002.004.004.004 0 .007-.004.014-.004.021 0 1.796 5.373 3.252 12 3.252s12-1.456 12-3.252c0-.007-.004-.014-.004-.021a.004.004 0 0 0 .004-.004V13.162a3 3 0 0 0-2.051-2.846l-.795-.265a.1.1 0 0 1-.04-.165l.178-.178A2.415 2.415 0 0 0 28 8H8z"/><path fill="#F19020" d="M29 6.8c0 1.657-4.925 3.2-11 3.2S7 8.457 7 6.8 11.925 4 18 4s11 1.143 11 2.8z"/><path fill="#F19020" d="M7 4h22v2.8H7z"/><ellipse fill="#F9CA55" cx="18" cy="4" rx="11" ry="3"/><ellipse fill="#AEB3B2" cx="18" cy="30.5" rx="11" ry="3"/><path fill="#F19020" d="M10.465 4c1.099-.582 4.053-1 7.535-1s6.436.418 7.535 1c.296-.157.465-.324.465-.5 0-.828-3.582-1.5-8-1.5s-8 .672-8 1.5c0 .176.169.343.465.5z"/><path fill="#AEB3B2" d="M18 12c-1.145 0-5.129-.07-8.335-.974a.5.5 0 1 1 .271-.963c3.083.87 6.952.937 8.064.937s4.981-.067 8.063-.937a.501.501 0 0 1 .271.963C23.129 11.93 19.145 12 18 12z"/><path fill="#FFF" d="M10 31a1 1 0 0 1-1-1V14a1 1 0 1 1 2 0v16a1 1 0 0 1-1 1z"/></svg>
sprite scroll <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 36 36"><path fill="#FFD983" d="M32 0H10C7.791 0 6 1.791 6 4v24H4c-2.209 0-4 1.791-4 4s1.791 4 4 4h24c2.209 0 4-1.791 4-4V8c2.209 0 4-1.791 4-4s-1.791-4-4-4z"/><path fill="#E39F3D" d="M8 10h24V8H10L8 7z"/><path fill="#FFE8B6" d="M10 0C7.791 0 6 1.791 6 4v24.555C5.41 28.211 4.732 28 4 28c-2.209 0-4 1.791-4 4s1.791 4 4 4 4-1.791 4-4V7.445C8.59 7.789 9.268 8 10 8c2.209 0 4-1.791 4-4s-1.791-4-4-4z"/><path fill="#C1694F" d="M12 4c0 1.104-.896 2-2 2s-2-.896-2-2 .896-2 2-2 2 .896 2 2M6 32c0 1.104-.896 2-2 2s-2-.896-2-2 .896-2 2-2 2 .896 2 2m24-17c0 .552-.447 1-1 1H11c-.552 0-1-.448-1-1s.448-1 1-1h18c.553 0 1 .448 1 1m0 4c0 .553-.447 1-1 1H11c-.552 0-1-.447-1-1s.448-1 1-1h18c.553 0 1 .447 1 1m0 4c0 .553-.447 1-1 1H11c-.552 0-1-.447-1-1s.448-1 1-1h18c.553 0 1 .447 1 1m0 4c0 .553-.447 1-1 1H11c-.552 0-1-.447-1-1 0-.553.448-1 1-1h18c.553 0 1 .447 1 1"/></svg>

/'
CONVENTIONS FOR ARROW DECLARATION:
- if possible, use `implements` and `extends`
- declare arrow before class: if class extends other class or implements interface
    (declare arrow near the child class not the parent class)
- declare arrow after class: if class uses or is in some other way related to another class
    (do not declare arrow near the used class, declare it near the user)
'/

package java.lang {
    interface Iterable<T> {}
    interface Comparable<T> {}
}

package collectible {
    interface Collectible {}
    note top of Collectible : sealed interface

    enum Resource implements Collectible {
        <$seedling*0.65> PLANT
        <$mushroom*0.65> FUNGI
        <$wolf*0.65> ANIMAL
        <$butterfly*0.65> INSECT

        - color CardColor
        + Resource(CardColor color)
        + getAssociatedColor() CardColor
    }

    enum Item implements Collectible {
        <$feather*0.65> QUILL
        <$jar*0.65> INKWELL
        <$scroll*0.65> MANUSCRIPT
    }
} /' end package collectible '/

package card {
    package face {
        package corner {
            class Corner {
                - socket boolean
                - Collectible collectible

                - Corner(Collectible collectible, boolean socket)
                - Corner(boolean socket)
                + {static} missing() Corner
                + {static} empty() Corner
                + {static} filled(Collectible collectible) Corner
                + isSocket() boolean
                + getCollectible() Optional<Collectible>
            }
            Collectible .. Corner
            note top of Corner : !isSocket() ==> getCollectible().isEmpty()

            enum CornerPosition {
                TOP_RIGHT
                TOP_LEFT
                BOTTOM_LEFT
                BOTTOM_RIGHT

                + getOpposite() CornerPosition
            }
        } /' end package corner '/

        package placement {
            class PlacementConstraint {
                - Map<Resource, Integer> requiredResources

                + PlacementConstraint(Map<Resource, Integer> requiredResources)
                + isSatisfied(PlayArea playArea) boolean
                + getRequiredResources() Map<Resource, Integer>
            }
        } /' end package placement '/

        package points {
            interface Points {
                + calculateScoredPoints(PlayArea.CardPlacement cp) int
            }

            class SimplePoints implements Points {
                - int points
                + SimplePoints(int points)
                + calculateScoredPoints(PlayArea.CardPlacement cp) int
                + getPoints() int
            }

            class CornerCoverPoints implements Points {
                - int pointsPerCorner
                + CornerCoverPoints(int pointsPerCorner)
                + calculateScoredPoints(PlayArea.CardPlacement cp) int
                + getPointsPerCorner() int
            }

            class ItemPoints implements Points {
                - Item item
                - int pointsPerItem
                + ItemPoints(Item item, int pointsPerItem)
                + calculateScoredPoints(PlayArea.CardPlacement cp) int
                + getItem() Item
                + getPointsPerItem() int
            }
        } /' end package points '/

        interface CardFace {
            + corner(CornerPosition cp) Corner
            + getPoints() Optional<Points>
            + getPlacementConstraint() Optional<PlacementConstraint>
            + getCenterResources() Map<Resource, Integer>
        }

        abstract class BaseCardFace implements CardFace {
            - Corner tl
            - Corner tr
            - Corner br
            - Corner bl

            + BaseCardFace(Corner tl, Corner tr, Corner br, Corner bl)
            + corner(CornerPosition cp) Corner
            + getPoints() Optional<Points>
            + getPlacementConstraint() Optional<PlacementConstraint>
            + getCenterResources() Map<Resource, Integer>
        }
        Corner <--* BaseCardFace
        CornerPosition .. BaseCardFace
        note left of BaseCardFace::getPoints
            Default implementation. Returns Optional.empty().
        end note
        note left of BaseCardFace::getPlacementConstraint
            Default implementation. Returns Optional.empty().
        end note
        note left of BaseCardFace::getCenterResources
            Default implementation. Returns empty list.
        end note

        class BackCardFace extends BaseCardFace {
            - Map<Resource, Integer> resources

            + BackCardFace(Corner tl, Corner tr, Corner br, Corner bl, Map<Resource, Integer> resources)
            + getCenterResources() Map<Resource, Integer>
        }

        class FrontCardFace extends BaseCardFace {
            - PlacementConstraint placementConstraint
            - Points points

            + FrontCardFace(Corner tl, Corner tr, Corner br, Corner bl, placementConstraint placementConstraint,
                Points points)
            + FrontCardFace(Corner tl, Corner tr, Corner br, Corner bl, Points points)
            + FrontCardFace(Corner tl, Corner tr, Corner br, Corner bl)
            + getPoints() Optional<Points>
            + getPlacementConstraint() Optional<PlacementConstraint>
        }
        PlacementConstraint <--* FrontCardFace
        Points <--* FrontCardFace
    } /' end package face '/

    class Card {
        - int id
        - CardColor baseColor
        - boolean isStarter
        - boolean isGold
        - FrontCardFace front
        - BackCardFace back

        + Card(int id, CardColor baseColor, boolean isStarter, boolean isGold, FrontCardFace front, BackCardFace back)
        + id() int
        + color() CardColor
        + isStarter() boolean
        + isGold() boolean
        + getFace(Side s) CardFace
    }
    FrontCardFace <--* Card
    BackCardFace <--* Card
    Side .. Card
    CardColor .. Card

    enum CardColor {
        <#red:white_circle:> RED
        <#green:white_circle:> GREEN
        <#blue:white_circle:> BLUE
        <#purple:white_circle:> PURPLE
        <:white_circle:> NEUTRAL
    }
    note left of CardColor::NEUTRAL
        Starter cards have neutral color.
    end note

    enum Side {
        FRONT
        BACK
    }
} /' end package card '/

package objective {
    abstract class Objective {
        - int points

        + Objective(int points)
        + getPointsPerMatch() int
        + getEarnedPoints(PlayArea pa) int
    }

    class SameCollectibleObjective extends Objective {
        - Collectible requiredCollectible
        - int requiredNumber
        + SameCollectibleObjective(int points, Collectible requiredCollectible, int requiredNumber)
        + getEarnedPoints(PlayArea pa) int
        + getRequiredCollectible() Collectible
        + getRequiredNumber() int
    }
    Collectible ... SameCollectibleObjective

    class DifferentCollectibleObjective extends Objective {
        - Set<Item> requiredItems
        + DifferentCollectibleObjective(int points, Set<Item> requiredItems)
        + getEarnedPoints(PlayArea pa) int
        + getRequiredItems() Set<Item>
    }
    Collectible ... DifferentCollectibleObjective

    class PatternObjective extends Objective {
        - Map<Position, CardColor> pattern
        - Set<Set<CardPlacement>> matches
        + PatternObjective(int points, Map<Position, CardColor> pattern)
        + getEarnedPoints(PlayArea pa) int
        + getPattern() Map<Position, CardColor>
    }
    CardColor ... PatternObjective
} /' end package objective '/

package choice {
    class Choice<T> {
        - Set<T> options
        - T selection

        + Choice(Set<T> choices)
        + getOptions() Set<T>
        + select(T selection) void
        + getSelected() Optional<T>
    }

    class MultiChoice<T, I> {
        - Set<T> options
        - Map<I, MultiChoiceChoice> choices
        - boolean settled

        + MultiChoice(Set<T> choices, Set<I> chooserIdentities)
        - getContendersPerOption() Map<T, Set<I>>
        - everyoneHasChosen() boolean
        + getChoices() Map<I, MultiChoiceChoice>
    }
    MultiChoiceChoice <-- MultiChoice : < has many

    class MultiChoiceChoice<T, I> {
        - T selection

        - MultiChoiceChoice(I identity)
        + getOptions() Set<T>
        + select(T choice) SelectionResult
        + getSelected() Optional<T>
        + getContenders(T choice) Set<I>
        + isSettled() boolean
    }
    SelectionResult .. MultiChoiceChoice
    note right of MultiChoiceChoice
        This is an inner class
        the actual name is MultiChoice<T, I>.Choice
    end note

    enum SelectionResult {
        OK
        CONTENDED
    }
} /' end package choice '/

package player {
    class PlayerProfile {
        - String name

        + PlayerProfile(String name)
        + getName() String
        + isConnected() boolean
    }

    class PlayerData {
        - List<Card> hand
        - Objective objective
        - PlayerColor color

        + PlayerData(List<Card> hand, Objective objectiveChoice, PlayerColor colorChoice)
        + getHand() List<Card>
        + getObjectiveChoice() Objective
        + getColorChoice() PlayerColor
    }
    Card <-- PlayerData : < has many \n in hand
    PlayerColor .. PlayerData

    enum PlayerColor {
        <#red:white_circle:> RED
        <#green:white_circle:> GREEN
        <#blue:white_circle:> BLUE
        <#yellow:white_circle:> YELLOW
    }
} /' end package player '/

package chat {
    abstract class Message {
        - PlayerProfile sender
        - String content

        + Message(PlayerProfile sender, String content)
        + getSender() PlayerProfile
        + getContent() String
        + {abstract} isRecipient(PlayerProfile pp) boolean
    }

    class BroadcastMessage extends Message {
        + BroadcastMessage(PlayerProfile sender, String content)
        + isRecipient(PlayerProfile pp) boolean
    }
    note left of BroadcastMessage::isRecipient
        Always returns true.
    end note

    class DirectMessage extends Message {
        - PlayerProfile recipient

        + DirectMessage(PlayerProfile sender, PlayerProfile recipient, String content)
        + isRecipient(PlayerProfile pp) boolean
    }

    class ChatManager {
        - List<Message> messages
        
        + ChatManager()
        + send(Message message) void
        + getMailbox(PlayerProfile pp) List<Message>
    }
    Message <--* ChatManager
}

package game {
    enum DrawResult {
        OK
        EMPTY
    }

    enum TurnPhase{
        PLACING
        DRAWING
    }

    class GameManager {
        - List<Game> games
        - int nextId
        - {static} String dataDir

        + GameManager(Path dataDir)
        + getGames() List<Game>
        + createGame(int maxPlayers) Game
        - loadSavedGamesIds() List<Integer>
        - loadGame(int id) Game
        + saveGame(Game game) void
        - serializeGame(Game game) String
        - deserializeGame(String json) Game
    }
    Game <--* GameManager
    note left of GameManager::loadSavedGamesIds()
        Returns list of saved game IDs by reading filenames in the data directory.
    end note

    class Game {
        - int id
        - GameStatus status
        - TurnPhase turnPhase
        - GameStatus recoverStatus
        - List<PlayerProfile> playerProfiles
        - ChatManager chatManager
        - Map<PlayerProfile, Card> startingCards;

        'initial choices
        - Map<PlayerProfile, Choice<Side>> startingCardSideChoices
        - Map<PlayerProfile, MultiChoiceChoice<PlayerColor, PlayerProfile>> colorChoices
        - Map<PlayerProfile, Choice<Objective>> objectiveChoices

        'game data
        - Map<PlayerProfile, PlayerData> playersData
        - Map<PlayerProfile, PlayArea> playAreas
        - Set<Objective> commonObjectives
        - int currentPlayer
        - int maxPlayers
        - Board board

        + Game(int id, int maxPlayers)
        + Game(int id, int maxPlayers, Board board)
        
        + getId() int
        + getObjectiveOptions(PlayerProfile pp) Set<Objective>
        + getPlayerProfiles() List<PlayerProfile>
        + getPlayerData(PlayerProfile pp) PlayerData
        + getPlayArea(PlayerProfile pp) PlayArea
        + getBoard() Board
        + getStartingCards() Map<PlayerProfile, Card>
        + getCurrentPlayer() PlayerProfile
        + getCommonObjectives() Set<Objective>
        + getStatus() GameStatus
        + getTurnPhase() TurnPhase
        + getChatManager() ChatManager
        + getMaxPlayers() int
        - changeCurrentPlayer() void
        + getWinners() List<PlayerProfile>
        + getTotalScores() Map<PlayerProfile, Integer>

        - setupAndStartTurnPhase() void
        + pauseGame() void
        + resumeGame() void
        - transition(GameStatus nextStatus) void
        - setTurnPhase(TurnPhase turnPhase) void

        - setFirstPlayer() void
        + join(PlayerProfile pp) void
        + startGame() void
        - setUpChoices() void
        + selectStartingCardSide(PlayerProfile pp, Side s) void
        + selectColor(PlayerProfile pp, PlayerColor pc) SelectionResult
        + selectObjective(PlayerProfile pp, Objective o) void
        + drawCard(PlayerProfile pp, DrawSource ds) DrawResult
        + placeCard(PlayerProfile pp, Card c, Side s, int i, int j) void
    }

    DrawResult .. Game
    'Board and PlayAreas exists only in a Game
    PlayerProfile <-- Game
    Choice <-- Game
    MultiChoiceChoice <-- Game
    Objective <-- Game
    ChatManager <--* Game
    Board <--* Game
    PlayArea <--* Game
    PlayerData <--* Game
    GameStatus .. Game
    note right of Game::startingCardSideChoices
        This group of fields are used during the setup phases of the game:
        * SETUP_STARTING_CARD_SIDE
        * SETUP_COLOR
        * SETUP_OBJECTIVE
    end note
    note right of Game::playersData
        This group of fields are used during the play phases of the game:
        * PLAY_PLACING
        * PLAY_DRAWING
    end note
    note left of Game::playerProfiles
        The players are stored in the order in which they play.
        players.get(0) is the first one to play.
    end note
    note left of Game::currentPlayer
        The index of the player currently playing
    end note

    enum GameStatus {
        AWAITING_PLAYERS,
        SETUP_STARTING_CARD_SIDE,
        SETUP_COLOR,
        SETUP_OBJECTIVE,
        PLAY,
        SECOND_LAST_TURN,
        LAST_TURN,
        FINISHED,
        SUSPENDED
    }

    class Board {
        - Set<FaceUpCard> faceUpCards
        - Deck resourceCardDeck
        - Deck goldenCardDeck

        + Board(Deck resourceCardDeck, Deck goldenCardDeck)
        + getFaceUpCards() Set<FaceUpCard>
        + getResourceCardDeck() Deck
        + getGoldenCardDeck() Deck
        + {static} createShuffled(Deck resourceCardDeck, Deck goldenCardDeck) Board
    }
    Deck <--* Board
    FaceUpCard <--* Board

    interface DrawSource {
        + Optional<Card> draw()
    }

    class FaceUpCard implements DrawSource {
        - Card card
        - Deck mainSource
        - Deck auxiliarySource

        + FaceUpCard(Deck mainSource, Deck auxiliarySource)
        + draw() Optional<Card>
        + getCard() Optional<Card>
        - Card drawFromDecks()
    }
    Deck <-- FaceUpCard : draws from

    class Deck implements DrawSource {
        - List<Card> cards

        + Deck(List<Card> cards)
        + shuffle() void
        + isEmpty() boolean
        + draw() Optional<Card>
        + createMergedDeck(List<Card> newCards) Deck
    }
    'Decks are aggregations of Cards
    Card --o Deck

    class Position {
        + {static} Position ORIGIN
        + int i
        + int j

        + getRelative(CornerPosition cp) Position
    }
    note top of Position
        this is an inner record class
        the actual name is PlayArea.Position
    end note

    Iterable <|.. PlayArea : <<bind>> \n PlayArea.CardPlacement
    class PlayArea {
        - Map<Position, CardPlacement> cards
        - int score
        - int seq
        - Map<Collectible, Integer> collectibleCount

        + PlayArea(Card starterCard, Side side)
        + placeAt(Position pos, Card c, Side side) PlayArea.CardPlacement
        + placeAt(int i, int j, Card c, Side side) PlayArea.CardPlacement
        - placeAt(Position position, Card card, Side side, boolean isFirst) PlayArea.CardPlacement
        - updatePlayablePositions(CardPlacement placement) void
        + getPlayablePositions() Set<Position>
        + getAt(Position pos) Optional<PlayArea.CardPlacement>
        + getAt(int i, int j) Optional<PlayArea.CardPlacement>
        + getCollectibleCount() Map<Collectible, Integer>
        + getScore() int
        + iterator() Iterator<CardPlacement>
    }
    CardPlacement <--* PlayArea : < has many
    Position -- PlayArea

    Comparable <|.. CardPlacement : <<bind>> \n PlayArea.CardPlacement
    class CardPlacement {
        - Position position
        - Card card
        - Side side
        - int seq
        - int points

        - CardPlacement(Position position, Card card, Side side, int seq);
        - calculatePoints() int
        + getPlayArea() PlayArea
        + getPosition() PlayArea.Position
        + getCard() Card
        + getSide() Side
        + getSeq() int
        + getVisibleFace() CardFace
        + getPoints() int
        + getRelative(CornerPosition cp) Optional<CardPlacement>
        + getTopPlacementAtCorner(CornerPosition cp) CardPlacement
        + getVisibleCollectibleAtCorner(CornerPosition cp) Optional<Collectible>
        + getCovered() Map<CornerPosition, CardPlacement>
        + compareTo(CardPlacement other) int
    }
    Card <-- CardPlacement
    note top of CardPlacement
        this is an inner class
        the actual name is PlayArea.CardPlacement
    end note
} /' end package game '/

@enduml
